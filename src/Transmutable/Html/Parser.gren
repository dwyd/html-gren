module Transmutable.Html.Parser exposing ( parse, parser, parserRaw, rawToHtml, cdataParser, closingTagParser, commentParser, declarationParser, nonRecursiveNodeParser, openingTagParser, processingInstructionParser, tagSpaceParser, tagNameParser, attributeParser, attributeNameParser, attributeValueSpecificationParser, attributeValueParser, unquotedAttributeValueParser, quotedAttributeValueParser, textParser )

{-|

#

@docs parse, parser, parserRaw, rawToHtml

## Individual parsers

@docs cdataParser, closingTagParser, commentParser, declarationParser, nonRecursiveNodeParser, openingTagParser, processingInstructionParser, tagSpaceParser, tagNameParser, textParser

### Attributes

@docs attributeParser, attributeNameParser, attributeValueSpecificationParser, attributeValueParser, unquotedAttributeValueParser, quotedAttributeValueParser

-}

import Parser exposing (..)
import Parser.Extra exposing (..)
import Transmutable.Html.Interior exposing ( Html(..), NodeProperties, Attribute(..), Descendants(..) )



-- 🌳


{-|-}
type RawHtml msg
    = OpeningTag
        { tagName : String
        , attributes : Array (Attribute msg)
        , closed : Bool
        , origin : String
        }
    | ClosingTag
        { tagName : String
        , origin : String
        }
    | Html (Html msg)



-- 🛠️


{-| Parse HTML.
-}
parse : String -> Result (Array DeadEnd) (Array (Html msg))
parse =
    Parser.run parser



-- PARSER


{-| HTML parser.
-}
parser : Parser (Array (Html msg))
parser =
    map rawToHtml parserRaw


{-| Transform the `RawHtml` into `Html`
-}
rawToHtml : Array (RawHtml msg) -> Array (Html msg)
rawToHtml rawHtml =
    { acc = []
    , remainder = rawHtml
    }
        |> translateRaw
        |> .acc


translateRaw :
    { acc : Array (Html msg)
    , remainder : Array (RawHtml msg)
    }
    -> { acc : Array (Html msg)
       , remainder : Array (RawHtml msg)
       , closed : Bool
       , end : Bool
       }
translateRaw { acc, remainder } =
    when Array.popFirst remainder is
        Just { first, rest } ->
            translateRawElement acc first rest

        Nothing ->
            { acc = acc
            , remainder = []
            , closed = False
            , end = True
            }


translateRawElement :
    Array (Html msg)
    -> RawHtml msg
    -> Array (RawHtml msg)
    -> { acc : Array (Html msg)
       , remainder : Array (RawHtml msg)
       , closed : Bool
       , end : Bool
       }
translateRawElement acc first rest =
    when first is
        Html h ->
            translateRaw
                { acc = addHtmlToList h acc
                , remainder = rest
                }

        OpeningTag opening ->
            let
                openLoop args =
                    let
                        nested =
                            translateRaw
                                { acc = args.acc
                                , remainder = args.remainder
                                }
                    in
                    if nested.closed then
                        Just
                            { acc = nested.acc
                            , remainder = nested.remainder
                            }
                    else if nested.end then
                        Nothing
                    else
                        openLoop
                            { acc = nested.acc
                            , remainder = nested.remainder
                            }

                maybe =
                    if opening.closed then
                        Just
                            { acc = []
                            , remainder = rest
                            }
                    else
                        openLoop
                            { acc = []
                            , remainder = rest
                            }
            in
            when maybe is
                Just result ->
                    result.acc
                        |> Regular
                        |> (\d ->
                                Node
                                    { props = 
                                        { key = Nothing
                                        , tagName = opening.tagName
                                        }
                                    , attributes = opening.attributes
                                    , descendants = d
                                    }
                            )
                        |> (\h ->
                                { acc = addHtmlToList h acc
                                , remainder = result.remainder
                                }
                            )
                        |> translateRaw

                Nothing ->
                    translateRaw
                        { acc = addHtmlToList (TextNode opening.origin) acc
                        , remainder = rest
                        }

        ClosingTag _ ->
            { acc = acc
            , remainder = rest
            , closed = True
            , end = False
            }


{-| Intermediate HTML parser.
-}
parserRaw : Parser (Array (RawHtml msg))
parserRaw =
    loop [] parserLoop


parserLoop : Array (RawHtml msg) -> Parser (Step (Array (RawHtml msg)) (Array (RawHtml msg)))
parserLoop html =
    let
        part =
            map
                (\el ->
                    [ el
                    ]
                        |> (\a -> html ++ a)
                        |> Loop
                )
    in
    oneOf
        [ -- Check if we reached the end
          map (\_ -> Done html) end

        , -- 
          part (map Html (backtrackable nonRecursiveNodeParser))

        , -- 
          part
            (map
                OpeningTag
                (backtrackable
                    (openingTagParser
                        { closed = False
                        }
                    )
                )
            )
        , part
            (map
                OpeningTag
                (backtrackable
                    (openingTagParser
                        { closed = True
                        }
                    )
                )
            )
        , part (map ClosingTag (backtrackable closingTagParser))

        , -- 
          part (map Html (backtrackable commentParser))
        , part (map Html (backtrackable processingInstructionParser))
        , part (map Html (backtrackable cdataParser))
        , part (map Html (backtrackable declarationParser))

        , -- 
          textParser html
        ]



-- PARTS


{-|-}
cdataParser : Parser (Html msg)
cdataParser =
    succeed Cdata
        |. symbol "<![CDATA["
        |= getChompedString (chompUntil "]]>")
        |. symbol "]]>"
        |> identity


{-|-}
closingTagParser :
    Parser
        { tagName : String
        , origin : String
        }
closingTagParser =
    succeed
        (\start tagName end source ->
            { tagName = tagName -- TODO: Rename to `source`
            , origin = String.slice start end source
            }
        )
        |= Parser.getOffset
        |. symbol "</"
        |= tagNameParser
        |. tagSpaceParser
        |. symbol ">"
        |= Parser.getOffset
        |= Parser.getSource


{-|-}
commentParser : Parser (Html msg)
commentParser =
    succeed identity
        |. symbol "<!--"
        |= getChompedString (chompUntil "-->")
        |. symbol "-->"
        |> andThen
                (\comment ->
                    if String.startsWith ">" comment then
                        problem "Text cannot start with \'>\'"
                    else if String.startsWith "->" comment then
                        problem "Text cannot start with \'->\'"
                    else if String.contains "--" comment then
                        problem "Text cannot contain \'--\'"
                    else if String.endsWith "-" comment then
                        problem "Text cannot end with \'-\'"
                    else
                        succeed (Comment comment)
                )


{-|-}
declarationParser : Parser (Html msg)
declarationParser =
    succeed (\a b -> Declaration (a ++ b))
        |. symbol "<!"
        |= getChompedString (chompIf Char.isAlpha)
        |= getChompedString (chompUntil ">")
        |. symbol ">"
        |> identity


{-|-}
nonRecursiveNodeParser : Parser (Html msg)
nonRecursiveNodeParser =
    succeed identity
        |= andThen
                (\opening ->
                    if
                        Array.member
                            opening.tagName
                            [ "pre"
                            , "script"
                            , "style"
                            , "textarea"
                            ]
                    then
                        succeed opening
                    else
                        problem "Found a recursive node instead"
                )
                (openingTagParser
                    { closed = False
                    }
                )
        |> andThen
                (\opening ->
                    let
                        chompUntilClosing contentsAcc =
                            succeed
                                (\a b ->
                                    { closing = b
                                    , contents = a
                                    }
                                )
                                |= getChompedString (chompUntil "</")
                                |= closingTagParser
                                |> andThen
                                        (\{ closing, contents } ->
                                            if String.toLower closing.tagName == String.toLower opening.tagName then
                                                succeed
                                                    { opening = opening
                                                    , contents = Just (contentsAcc ++ contents)
                                                    , closing = Just closing
                                                    }
                                            else
                                                chompUntilClosing (contentsAcc ++ contents ++ "</" ++ closing.tagName ++ ">")
                                        )
                    in
                    chompUntilClosing ""
                )
        |> andThen
                (\{ opening, closing, contents } ->
                    (when contents is
                        Just c ->
                            [ TextNode c
                            ]

                        Nothing ->
                            []
                    )
                        |> Regular
                        |> (\d ->
                                Node
                                    { props = 
                                        { key = Nothing
                                        , tagName = opening.tagName
                                        }
                                    , attributes = opening.attributes
                                    , descendants = d
                                    }
                            )
                        |> succeed
                )


{-|-}
openingTagParser :
    { closed : Bool
    }
    -> Parser
        { tagName : String
        , attributes : Array (Attribute msg)
        , closed : Bool
        , origin : String
        }
openingTagParser { closed } =
    succeed
        (\start tagName attributes end source ->
            { tagName = tagName
            , attributes = attributes
            , closed = closed -- TODO: Rename to `source`
            , origin = String.slice start end source
            }
        )
        |= Parser.getOffset
        |. symbol "<"
        |= tagNameParser
        |= many (backtrackable attributeParser)
        |. tagSpaceParser
        |. (if closed then
                symbol "/>"
             else
                symbol ">"
            )
        |= Parser.getOffset
        |= Parser.getSource


{-|-}
processingInstructionParser : Parser (Html msg)
processingInstructionParser =
    succeed ProcessingInstruction
        |. symbol "<?"
        |= getChompedString (chompUntil "?>")
        |. symbol "?>"
        |> identity


{-|-}
tagSpaceParser : Parser String
tagSpaceParser =
    succeed identity
        |= getChompedString (chompWhile (\c -> isSpace c || isTab c || isLineEnding c))
        |> andThen
                (\string ->
                    let
                        chars =
                            String.toArray string

                        lineEndings =
                            Array.keepIf (\c -> c == '\n' || c == '\r') chars
                    in
                    if Array.length lineEndings > 1 then
                        problem "Cannot contain multiple line endings"
                    else
                        succeed string
                )


{-|-}
tagNameParser : Parser String
tagNameParser =
    succeed identity
        |. chompIf Char.isAlpha
        |. many
                (oneOf
                    [ chompIf Char.isAlphaNum
                    , chompIf (\c -> c == '-')
                    ]
                )
        |> getChompedString



-- ATTRIBUTES


{-|-}
makeAttribute : String -> String -> Attribute msg
makeAttribute key value =
    Attribute { key = key, value = value }


{-|-}
attributeParser : Parser (Attribute msg)
attributeParser =
    oneOf
        [ succeed makeAttribute
            |. tagSpaceParser
            |= attributeNameParser
            |= attributeValueSpecificationParser
            |> backtrackable
        , succeed (\k -> makeAttribute k "")
            |. tagSpaceParser
            |= attributeNameParser
            |> identity
        ]


{-|-}
attributeNameParser : Parser String
attributeNameParser =
    succeed identity
        |. chompIf (\c -> Char.isAlpha c || c == '_' || c == ':')
        |. many (chompIf (\c -> Char.isAlphaNum c || c == '_' || c == '.' || c == ':' || c == '-'))
        |> getChompedString


{-|-}
attributeValueSpecificationParser : Parser String
attributeValueSpecificationParser =
    succeed identity
        |. tagSpaceParser
        |. specificChar '='
        |. tagSpaceParser
        |= attributeValueParser
        |> identity


{-|-}
attributeValueParser : Parser String
attributeValueParser =
    oneOf
        [ backtrackable quotedAttributeValueParser
        , unquotedAttributeValueParser
        ]


{-|-}
unquotedAttributeValueParser : Parser String
unquotedAttributeValueParser =
    getChompedString (chompOneOrMore (\c -> isSpace c == False && isLineEnding c == False && isTab c == False && c /= '\"' && c /= '\'' && c /= '=' && c /= '<' && c /= '>' && c /= '`'))


{-|-}
quotedAttributeValueParser : Parser String
quotedAttributeValueParser =
    andThen
        (\char ->
            succeed identity
                |= getChompedString (chompUntilEndOr (String.fromChar char))
                |. specificChar char
                |> identity
        )
        (oneOf
            [ specificChar '\"'
            , specificChar '\''
            ]
        )



-- TEXT


{-|-}
textParser : Array (RawHtml msg) -> Parser (Step (Array (RawHtml msg)) (Array (RawHtml msg)))
textParser html =
    succeed (textLoop html) |= getChompedString chompOne


textLoop : Array (RawHtml msg) -> String -> Step (Array (RawHtml msg)) (Array (RawHtml msg))
textLoop html text =
    when text is
        "" ->
            Done html

        _ ->
            when Array.last html is
                Just (Html (TextNode previousText)) ->
                    Loop (Array.pushLast (Html (TextNode (previousText ++ text))) (Array.dropLast 1 html))

                _ ->
                    Loop (Array.pushLast (Html (TextNode text)) html)



-- ㊙️


addHtmlToList : Html msg -> Array (Html msg) -> Array (Html msg)
addHtmlToList html array =
    when Array.popLast array is
        Just { last = TextNode t1, initial } ->
            when html is
                TextNode t2 ->
                    Array.pushLast (TextNode (t1 ++ t2)) initial

                _ ->
                    Array.pushLast html array

        Just _ ->
            Array.pushLast html array

        Nothing ->
            [ html
            ]
