module Transmutable.Html.Interior exposing ( Html(..), Attribute(..), NodeProperties, Descendants(..), EventDecoder(..), map, transmute )

{-| This module contains the core building blocks that make up the AST.

⚠️ This module should only be used by code that transmutes HTML. If you just want to write HTML, use the main `Html` module and the other modules such as `Html.Attributes`.

# Types

@docs Html, Attribute, EventDecoder, NodeProperties, Descendants

# Transmute

@docs transmute

# Mapping

@docs map

-}

import Json.Decode exposing ( Decoder, Value )



-- ROOT


{-|-}
type Html msg
    = Cdata String
    | Comment String
    | Declaration String
    | Node NodeProperties (Array (Attribute msg)) (Descendants msg)
    | ProcessingInstruction String
    | TextNode String



-- PARTS


{-|-}
type alias NodeProperties =
    { key : Maybe String
    , tagName : String
    }


{-|-}
type Attribute msg
    = Attribute String String
    | BoolProperty String Bool
    | Event String (EventDecoder msg)
    | StringProperty String String
    | Style String String
    | ValueProperty String Value


{-|-}
type Descendants msg
    = Regular (Array (Html msg))


{-|-}
type EventDecoder msg
    = Normal (Decoder msg)
    | MayStopPropagation
        (Decoder
            { message : msg
            , stopPropagation : Bool
            }
        )
    | MayPreventDefault
        (Decoder
            { message : msg
            , preventDefault : Bool
            }
        )
    | Custom
        (Decoder
            { message : msg
            , stopPropagation : Bool
            , preventDefault : Bool
            }
        )



-- 🛠️


{-|-}
map : (a -> b) -> Html a -> Html b
map f html =
    case html of
        Cdata a ->
            Cdata a

        Comment a ->
            Comment a

        Declaration a ->
            Declaration a

        Node props attrs descendants ->
            Node props (Array.map (mapAttribute f) attrs) (mapDescendants f descendants)

        ProcessingInstruction a ->
            ProcessingInstruction a

        TextNode a ->
            TextNode a


mapAttribute : (a -> b) -> Attribute a -> Attribute b
mapAttribute fn attribute =
    case attribute of
        Attribute key value ->
            Attribute key value

        Event name eventDecoder ->
            Event name (mapEventDecoder fn eventDecoder)

        BoolProperty key value ->
            BoolProperty key value

        StringProperty key value ->
            StringProperty key value

        Style key value ->
            Style key value

        ValueProperty key value ->
            ValueProperty key value


mapDescendants : (a -> b) -> Descendants a -> Descendants b
mapDescendants fn descendants =
    case descendants of
        Regular nodes ->
            Regular (Array.map (map fn) nodes)


mapEventDecoder : (a -> b) -> EventDecoder a -> EventDecoder b
mapEventDecoder fn eventDecoder =
    case eventDecoder of
        Normal d ->
            Normal (Json.Decode.map fn d)

        MayStopPropagation d ->
            MayStopPropagation
                (Json.Decode.map
                    (\a ->
                        { message = fn a.message
                        , stopPropagation = a.stopPropagation
                        }
                    )
                    d
                )

        MayPreventDefault d ->
            MayPreventDefault
                (Json.Decode.map
                    (\a ->
                        { message = fn a.message
                        , preventDefault = a.preventDefault
                        }
                    )
                    d
                )

        Custom d ->
            Custom
                (Json.Decode.map
                    (\v ->
                        { message = fn v.message
                        , stopPropagation = v.stopPropagation
                        , preventDefault = v.preventDefault
                        }
                    )
                    d
                )



-- TRANSMUTATION


{-|-}
type alias TransmuteContext =
    { level : Int
    , namespace : Maybe String
    , parentNodeProperties : Maybe NodeProperties
    }


{-| Use this helper function to translate `Html` into another data type.
-}
transmute :
    { node : NodeProperties -> Array (Attribute msg) -> TransmuteContext -> outcome
    , injectDescendants : outcome -> Array transmuted -> TransmuteContext -> transmuted
    , cdata : TransmuteContext -> String -> transmuted
    , comment : TransmuteContext -> String -> transmuted
    , declaration : TransmuteContext -> String -> transmuted
    , processingInstruction : TransmuteContext -> String -> transmuted
    , text : TransmuteContext -> String -> transmuted
    }
    -> Html msg
    -> transmuted
transmute =
    transmute_
        { level = 1
        , namespace = Nothing
        , parentNodeProperties = Nothing
        }


transmute_ :
    TransmuteContext
    -> { node : NodeProperties -> Array (Attribute msg) -> TransmuteContext -> outcome
       , injectDescendants : outcome -> Array transmuted -> TransmuteContext -> transmuted
       , cdata : TransmuteContext -> String -> transmuted
       , comment : TransmuteContext -> String -> transmuted
       , declaration : TransmuteContext -> String -> transmuted
       , processingInstruction : TransmuteContext -> String -> transmuted
       , text : TransmuteContext -> String -> transmuted
       }
    -> Html msg
    -> transmuted
transmute_ context manager html =
    case html of
        Node props attributes descendants ->
            let
                xmlns =
                    -- Check for a `xmlns` attribute which will change the active namespace
                    attributes
                        |> Array.findLast
                                (\attribute ->
                                    case attribute of
                                        Attribute "xmlns" ns ->
                                            True

                                        _ ->
                                            False
                                )
                        |> Maybe.andThen
                                (\attribute ->
                                    case attribute of
                                        Attribute "xmlns" ns ->
                                            Just ns

                                        _ ->
                                            Nothing
                                )

                contextWithXmlns =
                    -- If the `xmlns` attribute is present,
                    -- the active XML namespace will change.
                    case xmlns of
                        Just ns ->
                            { context | namespace = Just ns }

                        Nothing ->
                            context

                contextWithParent =
                    { contextWithXmlns
                        | level = context.level + 1
                        , parentNodeProperties = Just props
                    }
            in
            manager.injectDescendants
                (manager.node props attributes contextWithParent)
                (case descendants of
                    Regular array ->
                        Array.map (transmute_ contextWithParent manager) array
                )
                contextWithParent

        -- 
        Cdata a ->
            manager.cdata context a

        Comment a ->
            manager.comment context a

        Declaration a ->
            manager.declaration context a

        ProcessingInstruction a ->
            manager.processingInstruction context a

        TextNode text ->
            manager.text context text
