module Tests.Parser exposing ( tests )

import Expect
import Test exposing (..)
import Transmutable.Html.Interior exposing (..)
import Transmutable.Html.Parser as Html



-- TESTS


tests =
    describe
        "HTML parsing"
        [ commonmark
        , nesting
        ]


commonmark =
    describe
        "Commonmark Spec Examples (612-632)"
        [ testHtml
            "<a></a><bab></bab><c2c></c2c>"
            [ makeNode
                { key = Nothing
                , tagName = "a"
                }
                []
                (Regular [])
            , makeNode
                { key = Nothing
                , tagName = "bab"
                }
                []
                (Regular [])
            , makeNode
                { key = Nothing
                , tagName = "c2c"
                }
                []
                (Regular [])
            ]
            -- 
        , testHtml
            "<a/><b2/>"
            [ makeNode
                { key = Nothing
                , tagName = "a"
                }
                []
                (Regular [])
            , makeNode
                { key = Nothing
                , tagName = "b2"
                }
                []
                (Regular [])
            ]

        , -- 
          testHtml
            "<a  /><b2\ndata=\"foo\" />"
            [ makeNode
                { key = Nothing
                , tagName = "a"
                }
                []
                (Regular [])
            , makeNode
                { key = Nothing
                , tagName = "b2"
                }
                [ makeAttribute "data" "foo"
                ]
                (Regular [])
            ]

        , -- 
          testHtml
            "<a foo=\"bar\" bam = \'baz <em>\"</em>\' _boolean zoop:33=zoop:33 />"
            [ makeNode
                { key = Nothing
                , tagName = "a"
                }
                [ makeAttribute "foo" "bar"
                , makeAttribute "bam" "baz <em>\"</em>"
                , makeAttribute "_boolean" ""
                , makeAttribute "zoop:33" "zoop:33"
                ]
                (Regular [])
            ]

        , -- 
          testHtml
            "Foo <responsive-image src=\"foo.jpg\" />"
            [ TextNode "Foo "
            , makeNode
                { key = Nothing
                , tagName = "responsive-image"
                }
                [ makeAttribute "src" "foo.jpg"
                ]
                (Regular [])
            ]

        , -- 
          testHtml
            "<33> <__>"
            [ TextNode "<33> <__>"
            ]

        , -- 
          testHtml
            "<a h*#ref=\"hi\">"
            [ TextNode "<a h*#ref=\"hi\">"
            ]

        , -- 
          testHtml
            "<a href=\"hi\'> <a href=hi\'>"
            [ TextNode "<a href=\"hi\'> <a href=hi\'>"
            ]

        , -- 
          testHtml
            "< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />"
            [ TextNode "< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />"
            ]

        , -- 
          testHtml
            "<a href=\'bar\'title=title>"
            [ TextNode "<a href=\'bar\'title=title>"
            ]

        , -- 
          testHtml
            "<a></a><foo></foo >"
            [ makeNode
                { key = Nothing
                , tagName = "a"
                }
                []
                (Regular [])
            , makeNode
                { key = Nothing
                , tagName = "foo"
                }
                []
                (Regular [])
            ]

        , -- 
          testHtml
            "<a></a href=\"foo\">"
            [ TextNode "<a></a href=\"foo\">"
            ]

        , -- 
          testHtml
            "foo <!-- this is a\ncomment - with hyphen -->"
            [ TextNode "foo "
            , Comment " this is a\ncomment - with hyphen "
            ]

        , -- 
          testHtml
            "foo <!-- not a comment -- two hyphens -->"
            [ TextNode "foo <!-- not a comment -- two hyphens -->"
            ]

        , -- 
          testHtml
            "foo <!--> foo -->\n\nfoo <!-- foo--->"
            [ TextNode "foo <!--> foo -->\n\nfoo <!-- foo--->"
            ]

        , -- 
          testHtml
            "foo <?php echo $a; ?>"
            [ TextNode "foo "
            , ProcessingInstruction "php echo $a; "
            ]

        , -- 
          testHtml
            "foo <!ELEMENT br EMPTY>"
            [ TextNode "foo "
            , Declaration "ELEMENT br EMPTY"
            ]

        , -- 
          testHtml
            "foo <![CDATA[>&<]]>"
            [ TextNode "foo "
            , Cdata ">&<"
            ]

        , -- 
          testHtml
            "foo <a href=\"&ouml;\" />"
            [ TextNode "foo "
            , makeNode
                { key = Nothing
                , tagName = "a"
                }
                [ makeAttribute "href" "&ouml;"
                ]
                (Regular [])
            ]

        , -- 
          testHtml
            "foo <a href=\"\\*\" />"
            [ TextNode "foo "
            , makeNode
                { key = Nothing
                , tagName = "a"
                }
                [ makeAttribute "href" "\\*"
                ]
                (Regular [])
            ]
            -- Skipped: <a href="\"">
        ]



-- ADDITIONAL


nesting =
    describe
        "Nesting"
        [ testHtml
            "<a><b><c /></b></a><d><span-1></span-1 ></d\n><e /><f\n></f\n>"
            [ makeNode
                { key = Nothing
                , tagName = "a"
                }
                []
                (Regular
                    [ makeNode
                        { key = Nothing
                        , tagName = "b"
                        }
                        []
                        (Regular
                            [ makeNode
                                { key = Nothing
                                , tagName = "c"
                                }
                                []
                                (Regular [])
                            ]
                        )
                    ]
                )
            , makeNode
                { key = Nothing
                , tagName = "d"
                }
                []
                (Regular
                    [ makeNode
                        { key = Nothing
                        , tagName = "span-1"
                        }
                        []
                        (Regular [])
                    ]
                )
            , makeNode
                { key = Nothing
                , tagName = "e"
                }
                []
                (Regular [])
            , makeNode
                { key = Nothing
                , tagName = "f"
                }
                []
                (Regular [])
            ]

        , -- 
          testHtml
            "<script><span>Does not need to be parsed</span></script>"
            [ makeNode
                { key = Nothing
                , tagName = "script"
                }
                []
                (Regular
                    [ TextNode "<span>Does not need to be parsed</span>"
                    ]
                )
            ]

        , -- Nesting of elements with the same name
          testHtml
            "<div><div><div><span>A</span></div></div></div>"
            [ makeNode
                { key = Nothing
                , tagName = "div"
                }
                []
                (Regular
                    [ makeNode
                        { key = Nothing
                        , tagName = "div"
                        }
                        []
                        (Regular
                            [ makeNode
                                { key = Nothing
                                , tagName = "div"
                                }
                                []
                                (Regular
                                    [ makeNode
                                        { key = Nothing
                                        , tagName = "span"
                                        }
                                        []
                                        (Regular
                                            [ TextNode "A"
                                            ]
                                        )
                                    ]
                                )
                            ]
                        )
                    ]
                )
            ]

        , -- 
          testHtml
            "<b><b><bold><BOLD>text</bold></BOLD></b></b>"
            [ makeNode
                { key = Nothing
                , tagName = "b"
                }
                []
                (Regular
                    [ makeNode
                        { key = Nothing
                        , tagName = "b"
                        }
                        []
                        (Regular
                            [ makeNode
                                { key = Nothing
                                , tagName = "bold"
                                }
                                []
                                (Regular
                                    [ makeNode
                                        { key = Nothing
                                        , tagName = "BOLD"
                                        }
                                        []
                                        (Regular
                                            [ TextNode "text"
                                            ]
                                        )
                                    ]
                                )
                            ]
                        )
                    ]
                )
            ]
        ]



-- 🛠️


testHtml string expectedResult =
    test
        string
        (\_ ->
            string
                |> Html.parse
                |> Expect.equal (Ok expectedResult)
        )


makeNode : NodeProperties -> Array (Attribute msg) -> Descendants msg -> Html msg
makeNode props attributes descendants =
    Node
        { props = props
        , attributes = attributes
        , descendants = descendants
        }


makeAttribute : String -> String -> Attribute msg
makeAttribute key value =
    Attribute
        { key = key
        , value = value
        }
